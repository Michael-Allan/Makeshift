#!/usr/bin/env --split-string=${JDK_HOME}/bin/java @building/javac_arguments @building/java_arguments \c [SS]
package building; // [AFN]

// Usage from working directory `<PROJECTS>/`:  build <PROJECT>/ <target>…

import java.io.*;
import java.net.*;


/** A shell command to build the software of a given project: to compile the code and prepare it for use.
  */
final class BuildCommand { // [AFN]



    private BuildCommand() {}



    /** Executes the command as given by the shell.
      */
    public static void main( final String[] arguments ) throws BootstrappingFailure {
        if( arguments.length < 2 ){
            System.err.println( "Usage: build <PROJECT>/ <target>..." );
            return; }

        new BuildCommand().execute(); }



////  P r i v a t e  ////////////////////////////////////////////////////////////////////////////////////


    /** Executes the command.
      */
    private void execute() throws BootstrappingFailure {
        final boolean wasClean = !( new File( System.getProperty("java.io.tmpdir") + "/building" )
          .isDirectory() );

      // Compile the autobuilder code
      // ────────────────────────────
        // Already the working directory is `*PROJECTS*/`.  `../build_instructions.brec`
        final ProcessBuilder pB = new ProcessBuilder(
          System.getProperty("java.home") + "/bin/javac", /* The Java installation at `java.home` is
               known to include `javac` because it is a JDK, as assured by the `JDK_HOME` at top. */
            "@building/javac_arguments", "@building/javac_arguments_addendum",
            "building/Autobuilder.java" );
        try {
            final int exitValue =  pB.start().waitFor();
            if( exitValue != 0 ) { throw new BootstrappingFailure( "Exit value of " + exitValue
              + " from process: " + pB.command() ); }}
        catch( InterruptedException|IOException x ) { throw new BootstrappingFailure( x ); }
        try {

          // Load the autobuilder code
          // ─────────────────────────
            final Class<?> cA;
                if( wasClean ) { /* Then the directory of the class path (the output directory) did not exist
                      before the present runtime.  It exists now, but still the class loader will not look
                      there for its class files (JDK 14.0.2).  Therefore make a new class loader: */
                    final ClassLoader cL;
                    try {
                        cL = new URLClassLoader( new URL[] { new URL( "file:///tmp/building/" )}); }
                    catch( MalformedURLException x ) { throw new BootstrappingFailure( x ); }
                    cA = cL.loadClass( "building.Autobuilder" ); }
                else cA = Class.forName( "building.Autobuilder" );

          // Make an autobuilder
          // ───────────────────
            final Object autobuilder = cA.getDeclaredConstructor().newInstance(); }
        catch( ReflectiveOperationException x ) { throw new BootstrappingFailure( x ); }}



   // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


    private final class BootstrappingFailure extends Exception {

        private BootstrappingFailure( Exception cause ) { super( cause ); }

        private BootstrappingFailure( String message ) { super( message ); }}}



// NOTES
// ─────
//   AFN  Atypical file naming is allowed here.  ‘The compiler does not enforce the optional restriction
//        defined at the end of JLS §7.6, that a type in a named package should exist in a file whose
//        name is composed from the type name followed by the .java extension.’
//        http://openjdk.java.net/jeps/330
//        https://docs.oracle.com/javase/specs/jls/se14/html/jls-7.html#jls-7.6
//
//   SS · Here the long form `--split-string` (as opposed to `-S`) enables Emacs to recognize this file
//        as Java source code.  See the note apropos ‘source-launch files encoded with a shebang’ at
//        `http://reluk.ca/project/Java/Emacs/java-mode-tamed.el`.



                                       // Copyright © 2020, Michael Allan and contributors.  Licence MIT.
