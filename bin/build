#!/usr/bin/env --split-string=${JDK_HOME}/bin/java @building/javac_arguments @building/java_arguments \c [SS]
package building; // [AFN]

// Usage:  build <PROJECT-PROPER-PATH> <target>…
//
// Changes to this file immediately affect the next runtime.  Treat it as a script.

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.*;
import java.nio.file.*;

import static java.lang.ProcessBuilder.Redirect.INHERIT;
import static java.nio.file.Files.getLastModifiedTime;


/** A shell command to compile the code of a given project and prepare it for use.
  */
final class BuildCommand { // [AFN]


    private BuildCommand( final Path projectPath, final String[] arguments ) {
        this.projectPath = projectPath;
        this.arguments = arguments; }



    /** Execute the command as given by the shell.
      */
    public static void main( final String[] arguments ) {
        if( arguments.length < 2 ){
            System.err.println( "Usage: build <PROJECT-PROPER-PATH> <target>..." );
            return; }
        final String argument = arguments[0];
        final Path projectPath = FileSystems.getDefault().getPath( argument ); /* Effectively filters out
          input variance.  Whether or not the argument ends with ‘/’ has no effect on `projectPath`. */
        if( projectPath.isAbsolute() ) {
            System.err.println( "build: Not a relative path: " + argument );
            return; }
        new BuildCommand(projectPath,arguments).execute(); }



////  P r i v a t e  ////////////////////////////////////////////////////////////////////////////////////


    private final String[] arguments;



    /** Execute the command.
      */
    private void execute() { // A bootstrapped process comprising three build stages:

      // ════════════════════════════
      // 1. Build the builder builder
      // ════════════════════════════
        final Path sourceFile;
        final boolean toCompile;
        final Path outDirectory;
        final boolean wasClean; {
            // Already the working directory is the command directory.  `../build_instructions.brec`
            final Path p = Path.of( "building" ); // Proper path of the present project.
            sourceFile = p.resolve( "BuilderBuilder.java" );
            outDirectory = Path.of(System.getProperty("java.io.tmpdir")).resolve( p );
            final Path classFile = outDirectory.resolve( p.resolve( "BuilderBuilder.class" ));
            if( Files.exists( classFile )) {
                try { toCompile =
                  getLastModifiedTime(sourceFile).compareTo(getLastModifiedTime(classFile)) >= 0; }
                catch( IOException x ) { throw new Failure( x ); }
                wasClean = false; }
            else {
                toCompile = true;
                wasClean = !Files.isDirectory( outDirectory ); }}
        if( toCompile ) {

          // Compile `BuilderBuilder`  cf. `BuilderBuilder.get`
          // ────────────────────────
            final ProcessBuilder pB = new ProcessBuilder( System.getProperty("java.home") + "/bin/javac",
                // The Java installation at `java.home` is known to include `javac` because also
                // it is a JDK installation, as assured by the `JDK_HOME` at top.
              "@building/javac_arguments", "@building/javac_arguments_addendum", sourceFile.toString() );
            pB.redirectOutput( INHERIT );
            pB.redirectError( INHERIT );
            try {
                final int exitValue =  pB.start().waitFor();
                if( exitValue == 1 ) {
                    System.err.println( "build: Stopped on `javac` error" );
                    return; } // Already `javac` has told the details.
                else if( exitValue != 0 ) throw new Failure( "Exit value of " + exitValue
                  + " from process: " + pB.command() ); }
            catch( InterruptedException|IOException x ) { throw new Failure( x ); }}
        try {
            Class<?> c;

          // Load the `BuilderBuilder` code
          // ──────────────────────────────
            if( wasClean ) { /* Then the single directory given in `../javac_arguments` for the
                  `--class-path` of the present runtime (namely the output directory `/tmp/building/`)
                  did not exist before the present runtime.  It exists now, but still the class loader
                  will not look there for its class files (JDK 14.0.2). */
                final ClassLoader cL; // Therefore make a new class loader.
                try { cL = new URLClassLoader( new URL[] { new URL( "file://" + outDirectory + "/" )}); }
                catch( MalformedURLException x ) { throw new Failure( x ); }
                c = cL.loadClass( "building.BuilderBuilder" ); }
            else c = Class.forName( "building.BuilderBuilder" );

          // Get a builder builder for the project to be built
          // ─────────────────────
            final Object builderBuilder = c.getDeclaredMethod("forPath",Path.class).invoke(
              null/*static*/, projectPath );
            c = builderBuilder.getClass();


          // ════════════════════
          // 2. Build the builder
          // ════════════════════
            c.getMethod("build").invoke( builderBuilder );
            final Object builder = c.getMethod("newBuilder").invoke( builderBuilder );
            c = builder.getClass();


          // ══════════════════════════════
          // 3. Build the requested targets
          // ══════════════════════════════
            final int tN = arguments.length;
            int t = 1;
            do {
                final String target = arguments[t];
                if( !target.equals( "builder" )) { // Already built as `builder`.
                    c.getMethod("build").invoke( builder, target ); }}
            while( ++t < tN ); }
        catch( final InvocationTargetException xIT ) {
            final Throwable x = xIT.getCause();
            if( x != null && "building.BuilderBuilder.UserError".equals( x.getClass().getName() )) {
                System.err.println( x.getMessage() ); }
            else throw new Failure( xIT ); }
        catch( ReflectiveOperationException x ) { throw new Failure( x ); }}



    /** The <a href='http://reluk.ca/project/building/lexicon.brec'>
      * proper path</a> of the project to build.
      */
    private final Path projectPath;



   // ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


    private static final class Failure extends RuntimeException {

        private Failure( Exception cause ) { super( cause ); }

        private Failure( String message ) { super( message ); }}}



// NOTES
// ─────
//   AFN  Atypical file naming is allowed here.  ‘The compiler does not enforce the optional restriction
//        defined at the end of JLS §7.6, that a type in a named package should exist in a file whose
//        name is composed from the type name followed by the .java extension.’
//        http://openjdk.java.net/jeps/330
//        https://docs.oracle.com/javase/specs/jls/se15/html/jls-7.html#jls-7.6
//
//   SS · Here the long form `--split-string` (as opposed to `-S`) enables Emacs to recognize this file
//        as Java source code.  See the note apropos ‘source-launch files encoded with a shebang’ at
//        `http://reluk.ca/project/Java/Emacs/jmt-mode.el`.



                                                        // Copyright © 2020  Michael Allan.  Licence MIT.
